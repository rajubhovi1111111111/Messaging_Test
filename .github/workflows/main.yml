
 
name: msgtestcicd    -  

"on":
    workflow_dispatch: {}
env:
    ACR_RESOURCE_GROUP: cicdjava
    AZURE_CONTAINER_REGISTRY: acrworkflow1685431290173
    CLUSTER_NAME: cicdjava
    CLUSTER_RESOURCE_GROUP: cicdjava
    CONTAINER_NAME: msgtestjava
    DEPLOYMENT_MANIFEST_PATH: |
        manifests/deployment.yaml
        manifests/service.yaml

jobs:
  Lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      

      - name: Compile with Maven
        run: mvn compile  
        
      - name: Run Checkstyle
        run: mvn checkstyle:check


  dependency-test:
    runs-on: ubuntu-latest
    needs: Lint

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '8'

      - name: Dependency check
        run: mvn dependency:analyze
        

        

  unit-test:
    runs-on: ubuntu-latest
    needs: dependency-test
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          
      - name: Run unit Tests 
        run: mvn test 
        
        
       
  code-coverage:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          
      - name: Run test report
        run: mvn test jacoco:report
        
        
      - name: Log coverage percentages to workflow output
        run: |
         echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
         echo "branches = ${{ steps.jacoco.outputs.branches }}"
      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v3
        with:
         name: jacoco-report
         path: target/site/jacoco/

      - name: Get the Coverage info
        run: |
         echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
         echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"
         
  static-code-analysis:
 
    runs-on: ubuntu-latest
    needs: code-coverage
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=messgetest -Dsonar.projectName='messgetest'
    
  package-artifact:
    permissions:
        contents: read
        id-token: write
    runs-on: ubuntu-latest
    needs: static-code-analysis

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java version
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          
      - name: Package Artifact
        run: mvn package
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: java-app
          path: target
      - uses: actions/checkout@v3
      - uses: azure/login@v1.4.3  
        name: Azure login
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Build and push image to ACR
        run: az acr build --image ${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.ACR_RESOURCE_GROUP }} -f Dockerfile ./
    
    
  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs:
        - package-artifact
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1.4.3
        name: Azure login
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - uses: azure/use-kubelogin@v1
        name: Set up kubelogin for non-interactive login
        with:
          kubelogin-version: v0.0.25
      - uses: azure/aks-set-context@v3
        name: Get K8s context
        with:
          admin: "false"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          use-kubelogin: "true"
      - uses: Azure/k8s-deploy@v4
        name: Deploys application
        with:
          action: deploy
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
          namespace: namespace-workflow-1685373539958
      
